// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten
// pentagonal numbers are:

// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
// 70 − 22 = 48, is not pentagonal.

// Find the pair of pentagonal numbers, Pj and Pk, for which their
// sum and difference are pentagonal and D = |Pk − Pj| is minimised;
// what is the value of D?

#include <cmath>
#include <iostream>
#include <vector>

const int MAX_PENT = 3000;
const double MAX_RESIDUAL = 0.000000001;

using std::vector;

bool IsPentagonal(int n) {
  double res = (std::sqrt(24*(double)n + 1) + 1)/6;
  return (std::abs(res - std::round(res))) < MAX_RESIDUAL;
}

void Solution() {
  vector<int> pent_vec;
  pent_vec.reserve(MAX_PENT);
  for (int n = 1; n < MAX_PENT; ++n) {
    int p = n*(3*n-1)/2;
    pent_vec.push_back(p);
  }
  int diff;
  int sum;
  for (std::size_t i = 0; i < pent_vec.size(); ++i) {
    for (std::size_t j = 0; j < pent_vec.size(); ++j) {


      sum = pent_vec[i] + pent_vec[j];
      diff = pent_vec[j] - pent_vec[i];
      // First check if the diff or sum is pentagonal
      if (!IsPentagonal(sum) or !IsPentagonal(diff)) {
        continue;
      }
      std::cout << "P_i: " << i
                << "\tP_j: " << j
                << "\tdiff: " << diff << '\n';
      // We can beak since for a set i if we find a pentgonal j
      // we have found the minimum.
      return;
    }
  }
}

int main() {
  Solution();
  return 0;
}
